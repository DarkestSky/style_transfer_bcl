/*************************************************************************
 * Copyright (C) [2018] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/

#define ONELINE 256

// PowerDifference BCL单核实现
__mlu_entry__ void PowerDifferenceKernel(half* input1, half* input2, int32_t pow, half* output, int32_t len)
{
  if (taskId > 0) return;

  // 分片处理
  int32_t quotient = len / ONELINE;
  int32_t rem = len % ONELINE;

  // 申请内存
  __nram__ half input1_nram[ONELINE];
  __nram__ half input2_nram[ONELINE];
  __nram__ half buffer[ONELINE];
  __nram__ half output_nram[ONELINE];

  // For循环计算
  for (int i = 0; i < quotient; i++) {
    // 写入 ONELINE 个输入值
    __memcpy(input1_nram, input1 + i * ONELINE, ONELINE * sizeof(half), GDRAM2NRAM);
    __memcpy(input2_nram, input2 + i * ONELINE, ONELINE * sizeof(half), GDRAM2NRAM);

    // 做差
    __bang_sub(buffer, input1_nram, input2_nram, ONELINE);
    __memcpy(output_nram, buffer, ONELINE * sizeof(half), NRAM2NRAM);

    for (int j=1; j<pow; j++) {
      __bang_mul(output_nram, output_nram, buffer, ONELINE);
    }

    __memcpy(output + i * ONELINE, output_nram, ONELINE * sizeof(half), NRAM2GDRAM);
  }

  if (rem!=0) {
    // 写入 rem 个输入值
    __memcpy(input1_nram, input1 + quotient * ONELINE, rem * sizeof(half), GDRAM2NRAM);
    __memcpy(input2_nram, input2 + quotient * ONELINE, rem * sizeof(half), GDRAM2NRAM);

    // 做差
    __bang_sub(buffer, input1_nram, input2_nram, rem);
    __memcpy(output_nram, buffer, rem * sizeof(half), NRAM2NRAM);

    for (int j=1; j<pow; j++) {
      __bang_mul(output_nram, output_nram, buffer, rem);
    }

    __memcpy(output + quotient * ONELINE, output_nram, rem * sizeof(half), NRAM2GDRAM);
  }
}
